AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to provision a secure and scalable AWS infrastructure for a nodeJS app

Resources:
  # Creates an IAM user
  IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: demoUser

  # Generates an access key for the user, enabling programmatic access
  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser

  # Attaches a policy to the user that grants full access to EC2, RDS, ElastiCache, and IAM resources
  IAMUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: demoPolicy
      PolicyDocument:
        Version: '2010-09-09'
        Statement:
          - Effect: Allow
            Action:
              - ec2:*
              - rds:*
              - elasticache:*
              - iam:*
            Resource: '*'
      Users:
        - !Ref IAMUser

  # Create the VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: demoCustomVPC

  # Create an Internet Gateway for public internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create a public route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Create a public route to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Create two public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true # Automatically assign public IPs to instances launched in this subnet
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
        # Select the first availability zone
      Tags:
        - Key: Name
          Value: demoPublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true # Automatically assign public IPs to instances launched in this subnet
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
        # Select the second availability zone
      Tags:
        - Key: Name
          Value: demoPublicSubnet2

  # Associate public subnets with the public route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Create two private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
        # Select the first availability zone
      Tags:
        - Key: Name
          Value: demoPrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
        # Select the second availability zone
      Tags:
        - Key: Name
          Value: demoPrivateSubnet2

  # Create a security group for the EC2 instances
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Confine access to EC2 Instances to within the VPC and allow HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16

  # Create an IAM role for the EC2 instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: demoEC2InstanceRole
      AssumeRolePolicyDocument:
        Version: '2010-09-09'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess # Attach read-only policy for demo

  # Create an instance profile to associate the IAM role with EC2 instances
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # Fetch a basic free-tier AMI provided by AWS
  AMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 # the latest Amazon Linux 2 AMI ID

  # Create a Load Balance Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic on port 80 for the Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Create a Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: demoLoadBalancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: deletion_protection.enabled
          Value: 'false'

  # Create a Target Group
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'

  # Create a Listener for the Load Balancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '200'
            ContentType: text/plain
            MessageBody: 'OK'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # Create a launch configuration for the Auto Scaling group
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMIID # Use the AMI ID fetched from SSM Parameter or your own custom AMI
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2InstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile

  # Create an Auto Scaling group with two instances
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        # Place instances in private subnets
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      Tags:
        - Key: Name
          Value: demoAutoScalingInstance
          PropagateAtLaunch: true

  # Create a security group for the RDS instance
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Confine access to RDS MySQL instance to within the VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16

  # Create the RDS MySQL database instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro
      Engine: mysql
      MasterUsername: adminUsername
      MasterUserPassword: adminPassword
      DBName: demoDatabase
      # MultiAZ: true # disabled to avoid going over free tier
      AllocatedStorage: 1
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 0 # disabled to avoid going over free tier

  # Create a Security Group for ElastiCache
  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Confine access to ElastiCache Redis Cluster to within the VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.0.0.0/16

  # Create an ElastiCache Subnet Group
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # Create an ElastiCache Redis Cluster with multiple nodes
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1 # 2 nodes could likely exceed free tier
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup

Outputs:
  RDSHostname:
    Description: The hostname of the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSDBName:
    Description: The database name for the RDS instance
    Value: !Ref RDSInstance.DBName

  RedisHostname:
    Description: The hostname of the ElastiCache Redis instance
    Value: !GetAtt ElastiCacheCluster.ConfigurationEndpoint.Address
