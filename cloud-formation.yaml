AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to provision proof-of-concept of a secure and scalable AWS infrastructure

Resources:
  # Creates an IAM user
  IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: demoUser

  # Generates an access key for the user, enabling programmatic access
  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser

  # Attaches a policy to the user that grants full access to EC2, RDS, ElastiCache, and IAM resources
  IAMUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: demoPolicy
      PolicyDocument:
        Version: '2010-09-09'
        Statement:
          - Effect: Allow
            Action:
              - ec2:*
              - rds:*
              - elasticache:*
              - iam:*
            Resource: '*'
      Users:
        - !Ref IAMUser

  # Create the VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: demoCustomVPC

  # Create an Internet Gateway for public internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create a public route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Create a public route to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Create two public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true # Automatically assign public IPs to instances launched in this subnet
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
        # Select the first availability zone
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true # Automatically assign public IPs to instances launched in this subnet
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
        # Select the second availability zone
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Associate public subnets with the public route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # [Out of scope]
  # Create an Elastic IP for the NAT Gateway
  # ElasticIP:
  #   Type: "AWS::EC2::EIP"

  # [Out of scope]
  # Create the NAT Gateway in any one of the public subnets
  # NATGateway:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId: !GetAtt "ElasticIP.AllocationId"
  #     SubnetId: !Ref "PublicSubnet1"

  # [Out of scope]
  # Create a private route table
  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC

  # [Out of scope]
  # Create a private route to NAT Gateway for outbound internet access
  # PrivateRoute:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId: !Ref "PrivateRouteTable"
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     NatGatewayId: !Ref "NatGateway"

  # Create two private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
        # Select the first availability zone
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
        # Select the second availability zone
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  # [Out of scope]
  # Associate private subnets with the private route table
  # PrivateSubnet1RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet1
  #     RouteTableId: !Ref PrivateRouteTable

  # PrivateSubnet2RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet2
  #     RouteTableId: !Ref PrivateRouteTable

  # Create a security group for the EC2 instances
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Confine access to EC2 Instances to within the VPC and allow HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16

  # Create an IAM role for the EC2 instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2InstanceRole
      AssumeRolePolicyDocument:
        Version: '2010-09-09'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess # Attach read-only policy for demo

  # Create an instance profile to associate the IAM role with EC2 instances
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # Fetch a basic free-tier AMI provided by AWS
  AMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 # the latest Amazon Linux 2 AMI ID

  # Create a Load Balance Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic on port 80 for the Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Create a Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: demoLoadBalancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: deletion_protection.enabled
          Value: 'false'

  # Create a Target Group
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'

  # Create a Listener for the Load Balancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '200'
            ContentType: text/plain
            MessageBody: 'OK'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # [Out of scope]
  # Launch a single EC2 instance
  # EC2Instance:
  #   Type: "AWS::EC2::Instance"
  #   Properties:
  #     ImageId: !Ref AMIID # Use the AMI ID fetched from SSM Parameter or you own custom AMI
  #     InstanceType: "t2.micro"
  #     SubnetId: !Ref "PrivateSubnet1" # Place the instance in a private subnet
  #     SecurityGroups:
  #       - !Ref "EC2InstanceSecurityGroup"
  #     IamInstanceProfile: !Ref "EC2InstanceProfile"

  # Create a launch configuration for the Auto Scaling group
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMIID # Use the AMI ID fetched from SSM Parameter or your own custom AMI
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2InstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Install updates and dependencies
          yum update -y
          yum install -y ruby wget

          # Install the CodeDeploy agent
          cd /home/ec2-user
          wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto

          # Start the CodeDeploy agent
          systemctl start codedeploy-agent
          systemctl enable codedeploy-agent

  # Create an Auto Scaling group with two instances
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        # Place instances in private subnets
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      Tags:
        - Key: Name
          Value: AutoScalingInstance
          PropagateAtLaunch: true

  # [Out of scope]
  # Create an Auto Scaling policy to manage scaling
  # ScalingPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     AutoScalingGroupName: !Ref AutoScalingGroup
  #     PolicyName: ScaleOutPolicy
  #     PolicyType: SimpleScaling
  #     ScalingAdjustment: "1"
  #     AdjustmentType: ChangeInCapacity
  #     Cooldown: "300" # Cooldown period for scaling

  # Create a security group for the RDS instance
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Confine access to RDS MySQL instance to within the VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16

  # Create the RDS MySQL database instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro
      Engine: mysql
      MasterUsername: adminUsername
      MasterUserPassword: adminPassword
      DBName: demoDatabase
      # MultiAZ: true # may not stay within free tier if enabled 
      AllocatedStorage: '2'
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 0

  # Create a Security Group for ElastiCache
  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Confine access to ElastiCache Redis Cluster to within the VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.0.0.0/16

  # Create an ElastiCache Subnet Group
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # Create an ElastiCache Redis Cluster with multiple nodes
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1 # 2 nodes will likely exceed free tier
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup

  # Add a CodeDeploy service role
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: demoCodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server

  # CodeDeploy Deployment Group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITH_TRAFFIC_CONTROL

  # CodeDeploy Deployment
  CodeDeployDeployment:
    Type: AWS::CodeDeploy::Deployment
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Ref CodeDeployDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Revision:
        RevisionType: S3
        S3Revision:
          Bucket: demoBucket
          Key: demo-app.tar.gz
          BundleType: tar

Outputs:
  AccessKeyId:
    Description: Access Key ID
    Value: !Ref IAMUserAccessKey
    Export:
      Name: !Sub ${AWS::StackName}-AccessKeyId

  SecretAccessKey:
    Description: Secret Access Key
    Value: !GetAtt IAMUserAccessKey.SecretAccessKey
    Export:
      Name: !Sub ${AWS::StackName}-SecretAccessKey

  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2

  RDSHostname:
    Description: The hostname of the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSUsername:
    Description: The username for the RDS instance
    Value: !Ref RDSInstance.MasterUsername

  RDSPassword:
    Description: The password for the RDS instance
    Value: adminPassword
    NoEcho: true

  RDSDBName:
    Description: The database name for the RDS instance
    Value: !Ref RDSInstance.DBName

  RedisHostname:
    Description: The hostname of the ElastiCache Redis instance
    Value: !GetAtt ElastiCacheCluster.ConfigurationEndpoint.Address

  DeploymentGroupName:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref CodeDeployDeploymentGroup
    Export:
      Name: !Sub ${AWS::StackName}-DeploymentGroup
