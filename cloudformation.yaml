AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to provision a secure and scalable AWS
  infrastructure for a NodeJS app.

Parameters:
  # Fetch a basic free-tier AMI provided by AWS
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  # ----------------------------------------------------------------
  # IAM USERS, GROUPS AND ROLES
  # ----------------------------------------------------------------

  # Creates an IAM user
  IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: demoUser

  # Creates a managed policy for the required permissions
  IAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:*
              - rds:*
              - elasticache:*
            Resource: '*'
      Description: Managed policy for EC2, RDS, ElastiCache access

  # Creates an IAM group
  IAMGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: demoGroup
      ManagedPolicyArns:
        - !Ref IAMManagedPolicy

  # Adds the user to the group
  AddUserToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref IAMGroup
      Users:
        - !Ref IAMUser

  # Creates an IAM role for accessing services programmatically
  IAMUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:user/demoUser
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref IAMManagedPolicy

  # Generates an access key for the role (not for user directly)
  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser

  # ----------------------------------------------------------------
  # VPC AND SUBNETS
  # ----------------------------------------------------------------

  # Create the VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: demoCustomVPC

  # Create an Internet Gateway for public internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create two private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
        # Select the first availability zone
      Tags:
        - Key: Name
          Value: demoPrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
        # Select the second availability zone
      Tags:
        - Key: Name
          Value: demoPrivateSubnet2

  # Create a public route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Create a public route to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Create two public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true # Automatically assign public IPs to instances launched in this subnet
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
        # Select the first availability zone
      Tags:
        - Key: Name
          Value: demoPublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true # Automatically assign public IPs to instances launched in this subnet
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
        # Select the second availability zone
      Tags:
        - Key: Name
          Value: demoPublicSubnet2

  # Associate public subnets with the public route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ----------------------------------------------------------------
  # EC2, AUTOSCALING
  # ----------------------------------------------------------------

  # Create a security group for the EC2 instances
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: demoEC2SecurityGroup
      GroupDescription: 'Allow SSH and HTTP'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0 # Allow traffic on port 3000 where the node app will be running

  # IAM Role that provides necessary permissions for EC2 instances to run AWS commands
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: demoEC2InstanceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      # Attach a policy granting access to S3 and STS for the instances
      Policies:
        - PolicyName: demoEC2InstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 'arn:aws:s3:::demo-app-bucket-*/*'
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: '*'

  # Attach the role to the EC2 instances via an instance profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: demoEC2InstanceProfile
      Roles:
        - !Ref EC2InstanceRole

  # Template for Auto-scaling Group
  AutoScalingLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: demoAutoScalingTemplate
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.micro
        # Create key-pair manaully before-hand
        # aws ec2 create-key-pair --key-name demoAutoScalingKeyPair --query 'KeyMaterial' --output text > demoAutoScalingKeyPair.pem
        KeyName: demoAutoScalingKeyPair
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref EC2InstanceSecurityGroup
        UserData:
          # To verify, tunnel into EC2 and run "sudo cat /var/log/cloud-init-output.log"
          # When the userData script is updated the EC2 instances need to be restarted
          Fn::Base64: !Sub |
            #!/bin/bash

            # Update all system packages
            yum update -y

            # Install Node.js (LTS version)
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs

            # Install CodeDeploy agent for handling deployments
            # yum install -y ruby wget
            # cd /home/ec2-user
            # wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            # chmod +x ./install
            # ./install auto
            # service codedeploy-agent start

            # Pull and run app manually
            cd /home/ec2-user
            mkdir -p node-app
            cd node-app
            account_id=$(aws sts get-caller-identity --query "Account" --output text)
            app_name="demo-nodejs-app"
            app_zip="demo-nodejs-app.zip"
            bucket_name="demo-app-bucket-$account_id"
            aws s3 cp "s3://$bucket_name/$app_zip" ./
            unzip "$app_zip"
            cd "$app_name"
            npm install
            node app.js >app.log 2>&1 &

  # Create AutoScaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '2'
      MaxSize: '2'
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateId: !Ref AutoScalingLaunchTemplate
        Version: !GetAtt AutoScalingLaunchTemplate.LatestVersionNumber
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref LBTargetGroup

  # Policy used to track CPU usage for Auto Scaling
  cpuUsage:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      # This scaling policy adjusts capacity based on target tracking metrics
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          # Track the average CPU utilization of the Auto Scaling group
          PredefinedMetricType: ASGAverageCPUUtilization
        # Target value for the average CPU utilization is set to 50%
        # The Auto Scaling group will scale up or down to maintain CPU usage around this threshold
        TargetValue: 50

  # ----------------------------------------------------------------
  # LOAD_BALANCER
  # ----------------------------------------------------------------

  # Create Load Balancer Target Group
  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'demoLBTargetGroup'
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: / # Ensure your health check path matches a valid route in your app
      Port: 3000 # Port on which the node application is running
      Protocol: HTTP

  # Create Load Balancer
  LB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: demoLB
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref EC2InstanceSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
  # Create Load Balancer listener
  LBlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroup
      LoadBalancerArn: !Ref LB

  # ----------------------------------------------------------------
  # CODE DEPLOY
  # ----------------------------------------------------------------

  # CodeDeployServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codedeploy.amazonaws.com
  #           Action: sts:AssumeRole
  #     Path: '/'
  #     Policies:
  #       - PolicyName: CodeDeployPolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ec2:*
  #                 - autoscaling:*
  #                 - s3:*
  #                 - codedeploy:*
  #               Resource: '*'

  # CodeDeployApplication:
  #   Type: AWS::CodeDeploy::Application
  #   Properties:
  #     ApplicationName: 'demo-nodejs-app'
  #     ComputePlatform: Server

  # CodeDeployDeploymentGroup:
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   Properties:
  #     ApplicationName: !Ref CodeDeployApplication
  #     DeploymentGroupName: 'demo-deploy-group'
  #     ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
  #     AutoScalingGroups:
  #       - !Ref AutoScalingGroup
  #     DeploymentConfigName: CodeDeployDefault.AllAtOnce
  #     LoadBalancerInfo:
  #       TargetGroupInfoList:
  #         - Name: !GetAtt LBTargetGroup.TargetGroupName
  #     AutoRollbackConfiguration:
  #       Enabled: true
  #       Events:
  #         - DEPLOYMENT_FAILURE
  #         - DEPLOYMENT_STOP_ON_ALARM

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  EC2InstanceSecurityGroup:
    Description: Security group with ingress rule
    Value: !Ref EC2InstanceSecurityGroup

  LoadBalancerDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt LB.DNSName
